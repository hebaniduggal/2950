{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt   #plot routines in own namespace\n",
    "import numpy as np          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "n = [0,1,2,3,4,5,6,7,8,9] \n",
    "p = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def btheorem(r,Pfair,Ploaded,fair6,loaded6): #function to calculate P(L|6^3) via Bayes\n",
    "    return ((loaded6**r)*Ploaded)/(((loaded6**r)*Ploaded)+((fair6**r)*Pfair))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7105263157894738"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "btheorem(5,.99,.01,1./6.,.50) #this is my answer to part 5a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9566929133858268"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "btheorem(7,.99,.01,1./6.,.50) #this is my answer to part 5b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in n: #this is my list of values for 5c\n",
    "    p.append(btheorem(i,.99,.01,1./6.,.5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8999999999999999"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "btheorem(3,.75,.25,1./6.,.50) #this is my answer to part 5d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "bayes = [] #this is my list of values for part 5d\n",
    "for i in n:\n",
    "    bayes.append(btheorem(i,.75,.25,1./6.,.50))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4999894603232897"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "btheorem(3,.99,.01,1./6.,.771) #this is my answer to 5e"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prob = [] #this is the list of values for 5e\n",
    "for i in n:\n",
    "    prob.append(btheorem(i,.99,.01,1./6.,.771))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110250850>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(n,p, label = \"5c\")\n",
    "plt.plot(n,bayes,label = \"5d\")\n",
    "plt.plot(n,prob, label = \"5e\")\n",
    "plt.xlabel(\"n\")\n",
    "plt.ylabel(\"probability\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
